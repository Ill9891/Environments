// <auto-generated />
using System;
using Environments.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Environments.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20220521115450_added3Tebles")]
    partial class added3Tebles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Environments.Models.EnvironmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Credentials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsBusy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StackId");

                    b.ToTable("EnvironmentStatus");
                });

            modelBuilder.Entity("Environments.Models.Stack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EnvironmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("StackName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentStatusId");

                    b.ToTable("Stacks");
                });

            modelBuilder.Entity("Environments.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Environments.Models.EnvironmentStatus", b =>
                {
                    b.HasOne("Environments.Models.Stack", "Stack")
                        .WithMany()
                        .HasForeignKey("StackId");

                    b.Navigation("Stack");
                });

            modelBuilder.Entity("Environments.Models.Stack", b =>
                {
                    b.HasOne("Environments.Models.EnvironmentStatus", null)
                        .WithMany("EnvIsApplicableFor")
                        .HasForeignKey("EnvironmentStatusId");
                });

            modelBuilder.Entity("Environments.Models.EnvironmentStatus", b =>
                {
                    b.Navigation("EnvIsApplicableFor");
                });
#pragma warning restore 612, 618
        }
    }
}
